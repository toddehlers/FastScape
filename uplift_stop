!user supplied
      t%u(ij)=uplift
      !dh=uplift*p%dt
      !t%h(ij)=t%h(ij)+dh
      !t%hb(ij)=t%hb(ij)+dh
      !t%hi(ij)=t%hi(ij)+dh
      !t%href(ij)=t%href(ij)+dh
      !if (p%refflex) t%hi_iso(ij)=t%hi_iso(ij)+dh
      endif
    enddo
  enddo
!$OMP end do nowait
!$OMP end parallel

! Adding velocity interface (PRE March2020) START 
  if (VelocityInput .eq. 1) then
    VelocityFile = p%run//trim(VelocityFile)
    call LengthOfFile(VelocityFile, LineCounter)
    open(FileUnit,file=VelocityFile,status='old',iostat=ios)
      do i=1,1
        read(FileUnit,*,iostat=ios)
      enddo
      NumberOfVelocityFiles = LineCounter - 1
      allocate (TimeStep(NumberOfVelocityFiles), VelocityFiles(NumberOfVelocityFiles), InputTimeStep(NumberOfVelocityFiles))
      do i = 1, NumberOfVelocityFiles
        read(FileUnit, *, iostat=ios) InputTimestep(i), VelocityFiles(i)
        VelocityFiles(i) = '/input/'//trim(VelocityFiles(i))
        TimeStep(i) = (InputTimeStep(1) - InputTimeStep(i)) * 1e6_8
        call ShortenString(VelocityFiles(i), 4)
      end do
    close(FileUnit)

    ! Identify time step and grids
    do i = 1,(NumberOfVelocityFiles+1)
      if (i == 1) then
        VelocityFile = p%run//trim(VelocityFiles(i))//'.dat'
      else
        VelocityFile = p%run//trim(VelocityFiles(i-1))//'.dat'
      end if
      if (TimeStep(i) >= time) then
        TimeSpan = TimeStep(i) - TimeStep(i-1)
        exit
      end if
    end do
    open(FileUnit, file = VelocityFile, status='old')
      do j=1,p%ny
        do i=1,p%nx
        ij=i+(j-1)*p%nx
          read(FileUnit, *, iostat=ios) vx_input(ij), vy_input(ij), vz_input(ij)
          vx(i,j) = vx_input(ij)
          vy(i,j) = vy_input(ij)
          vz(i,j) = vz_input(ij) + RegionalUplift
        enddo
      enddo
    close(FileUnit)
  end if

  ! Adding Velocity interface (PRE MArch2020) END

! Adding advection (PRE March2019) START
! x-advection using an implicit, second-order scheme to solve advection eq.

allocate (diag(p%nx),sup(p%nx),inf(p%nx),rhs(p%nx),res(p%nx))

write (cbc,'(i4.4)') p%ibc

! Create 2D array
  do j=1,p%ny
    do i=1,p%nx
      ij=i+(j-1)*p%nx
      h_advect(i,j) = t%h(ij)
      hb_advect(i,j) = t%hb(ij)
      hi_advect(i,j) = t%hi(ij)
      href_advect(i,j) = t%href(ij)
      if (p%refflex) hi_iso_advect(i,j) = t%hi_iso(ij)
    enddo
  enddo

  do j=1,p%ny

    diag=1.d0
    sup=0.d0
    inf=0.d0

    do i=1,p%nx
      if (vx(i,j).gt.0.d0) then
        diag(i)=1.d0+vx(i,j)*p%dt/p%dx
        inf(i)=-vx(i,j)*p%dt/p%dx
      elseif (vx(i,j).lt.0.d0) then
        diag(i)=1.d0-vx(i,j)*p%dt/p%dx
        sup(i)=vx(i,j)*p%dt/p%dx
      endif
    enddo
    sup(1)=0.d0
    diag(1)=1.d0
    diag(p%nx)=1.d0
    inf(p%nx)=0.d0

    rhs=h_advect(:,j)
    call tridag (inf,diag,sup,rhs,res,p%nx)
    h_advect(:,j)=res

    rhs=hb_advect(:,j)
    call tridag (inf,diag,sup,rhs,res,p%nx)
    hb_advect(:,j)=res

    rhs=hi_advect(:,j)
    call tridag (inf,diag,sup,rhs,res,p%nx)
    hi_advect(:,j)=res

    rhs=href_advect(:,j)
    call tridag (inf,diag,sup,rhs,res,p%nx)
    href_advect(:,j)=res    

    if (p%refflex) then
    rhs=hi_iso_advect(:,j)
    call tridag (inf,diag,sup,rhs,res,p%nx)
    hi_iso_advect(:,j)=res 
    end if

  enddo

  deallocate (diag,sup,inf,rhs,res)

! y-advection using an implicit, second-order scheme to solve advection eq.

 allocate (diag(p%ny),sup(p%ny),inf(p%ny),rhs(p%ny),res(p%ny))

  do i=1,p%nx

    diag=1.d0
    sup=0.d0
    inf=0.d0

    do j=1,p%ny
      if (vy(i,j).gt.0.d0) then
        diag(j)=1.d0+vy(i,j)*p%dt/p%dy
        inf(j)=-vy(i,j)*p%dt/p%dy
      elseif (vy(i,j).lt.0.d0) then
        diag(j)=1.d0-vy(i,j)*p%dt/p%dy
        sup(j)=vy(i,j)*p%dt/p%dy
      endif
    enddo
    sup(1)=0.d0
    diag(1)=1.d0
    diag(p%ny)=1.d0
    inf(p%ny)=0.d0

    rhs=h_advect(i,:)
    call tridag (inf,diag,sup,rhs,res,p%ny)
    h_advect(i,:)=res

    rhs=hb_advect(i,:)
    call tridag (inf,diag,sup,rhs,res,p%ny)
    hb_advect(i,:)=res

    rhs=hi_advect(i,:)
    call tridag (inf,diag,sup,rhs,res,p%ny)
    hi_advect(i,:)=res

    rhs=href_advect(i,:)
    call tridag (inf,diag,sup,rhs,res,p%ny)
    href_advect(i,:)=res    

    if (p%refflex) then
    rhs=hi_iso_advect(i,:)
    call tridag (inf,diag,sup,rhs,res,p%ny)
    hi_iso_advect(i,:)=res 
    end if

  enddo

  deallocate (diag,sup,inf,rhs,res)

  i1=1
  i2=p%nx
  if (cbc(4:4)=='1') i1=2
  if (cbc(2:2)=='1') i2=p%nx-1
  i3=1
  i4=p%ny
  if (cbc(1:1)=='1') i3=2
  if (cbc(3:3)=='1') i4=p%ny-1

  do j=i3,i4
    do i=i1,i2
    ij=i+(j-1)*p%nx
    h_advect(i,j)=h_advect(i,j)+vz(i,j)*p%dt
    hb_advect(i,j)=hb_advect(i,j)+vz(i,j)*p%dt
    hi_advect(i,j)=hi_advect(i,j)+vz(i,j)*p%dt
    href_advect(i,j)=href_advect(i,j)+vz(i,j)*p%dt
    if (p%refflex) hi_iso_advect(i,j)=hi_iso_advect(i,j)+vz(i,j)*p%dt
    enddo
  enddo

! Create 1D array
  do j=1,p%ny
    do i=1,p%nx
      ij=i+(j-1)*p%nx
      t%h(ij) = h_advect(i,j)
      t%hb(ij) = hb_advect(i,j)
      t%hb(ij)=min(t%h(ij),t%hb(ij))
      t%hi(ij) = hi_advect(i,j)
      t%href(ij) = href_advect(i,j)
	    if (p%refflex) t%hi_iso(ij) = hi_iso_advect(i,j)
      t%u(ij)=vz(i,j)
    enddo
  enddo

! Adding advection (PRE March2019) END

endif

return

end subroutine uplift_rate