subroutine flexure (p,t,g)

! first half of the flexure.f90 routine that can be complemented by adding lines
! in the input file

! This routine computes the flexural response to the load caused by topography changes

use omp_lib
use definitions

implicit none

type (param) p
type (topography) t
type (topology) g

real*8 hx,drho,elt,dflex,d,xk,xloc,yloc,hh,hh0,h1,h2,h3,h4,r,s
real*8, dimension(:,:), allocatable :: flex,work,fl
real*8 xmean,xfmin,xfmax,dxf,ddxf,ymean,yfmin,yfmax,dyf,ddyf,fmean
real*8 pihx,pihy,pi,fi,fj,tij,xp,yp,hisotot,xflex,yflex,rx,ry,dh
real*8, dimension(:), allocatable :: junk

character c4*4

integer nflex,i,j,k,ii,jj,iref,iflexmin,iflexmax,jflexmin,jflexmax
integer ixflex,iyflex,iflexfirst,iflexlast,jflexfirst,jflexlast
integer ij,iflex,jflex
integer, dimension(:,:), allocatable :: nfl

real*8 x,y,xl,yl,time,h,dx,dy,dt
real*8 w1,w2,w3,w4,w5,w6,w7,w8,w9,w0
integer i1,i2,i3,i4,i5,i6,i7,i8,i9,i0,nx,ny
real*8 drhoe,dist

nflex=512

iref=1

write (c4,'(i4)') p%ibc
if (p%ibc.lt.10) c4(1:3)='000'
if (p%ibc.lt.100) c4(1:2)='00'
if (p%ibc.lt.1000) c4(1:1)='0'

ixflex=1
if (c4(2:2).eq.'0' .and. c4(4:4).eq.'0' .and. p%meanflex) ixflex=0
iyflex=1
if (c4(1:1).eq.'0' .and. c4(3:3).eq.'0' .and. p%meanflex) iyflex=0

hx=3.d0*max(p%xl,p%yl)
drho=p%rhocflex*9.81d0
elt=p%thickflex
dflex=p%ym/12.d0/(1.d0-p%pratio**2)
d=dflex*elt**3
xk=p%rhoaflex*9.81d0

xmean=p%xl/2.
xfmin=xmean-hx/2.
xfmax=xmean+hx/2.
dxf=xfmax-xfmin
ddxf=dxf/(nflex-1)
ymean=p%yl/2.
yfmin=ymean-hx/2.
yfmax=ymean+hx/2.
dyf=yfmax-yfmin
ddyf=dyf/(nflex-1)

allocate (flex(nflex,nflex),work(nflex,nflex),junk(nflex))
!$OMP parallel shared(flex)
!$OMP workshare
flex=0.
!$OMP end workshare nowait
!$OMP end parallel

iflexmin=1+(0.-xfmin)/ddxf
iflexmax=1+(p%xl-xfmin)/ddxf
jflexmin=1+(0.-yfmin)/ddyf
jflexmax=1+(p%yl-yfmin)/ddyf

time=p%time
xl=p%xl
yl=p%yl
nx=p%nx
ny=p%ny
dx=p%dx
dy=p%dy
dt=p%dt

!$OMP parallel shared(flex,ddxf,ddyf,drho,xfmin,yfmin,nx,ny,xl,yl,dx,dy,dt,time) &
!$OMP private(i,j,x,y,h,i1,i2,i3,i4,i5,i6,i7,i8,i9,i0,w1,w2,w3,w4,w5,w6,w7,w8,w9,w0)
!$OMP do schedule(dynamic,nflex/p%num_threads)
do j=1,nflex
y=(j-1)*ddyf+yfmin
do i=1,nflex
x=(i-1)*ddxf+xfmin
h=0.d0
!user supplied dynamic topography start
